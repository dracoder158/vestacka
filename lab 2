import csv
import os

# Path to the folder with CSV files
folder_path = '../code/data/roads'

# List to store contents of each CSV file
csv_contents = []

# Iterate through each file in the folder
for file in os.listdir(folder_path):
    if file.endswith('.csv'):
        file_path = os.path.join(folder_path, file)
        
        # Open and read the CSV file
        with open(file_path, 'r') as csvfile:
            csvreader = csv.reader(csvfile)
            
            # Read each row and add it to the list
            file_content = [row for row in csvreader]
            csv_contents.append(file_content)

# Print out contents of each CSV file
for idx, content in enumerate(csv_contents):
    print(f"Content of file {idx + 1}:")
    for row in content:
        print(row)
    print("\n")






newlist = []
for i in range(len(csv_contents)):
    for n in range(len(csv_contents[i])):
        row = csv_contents[i][n]
        
        # Check if the row has at least 4 columns
        if len(row) > 3:
            # Access the fourth element safely
            if row[3]:
                if row[3]!=('ЈАЗОЛ НА ПОЧЕТОКОТ'):
                  # print(row[3])
                    
                    newlist.append(row[3])
           
newlist






newlist1 = []
for i in range(len(csv_contents)):
    for n in range(len(csv_contents[i])):
        row = csv_contents[i][n]
        
        # Check if the row has at least 4 columns
        if len(row) > 4:
            # Access the fourth element safely
            if row[4]:
                if row[4]!=('ЈАЗОЛ НА КРАЈОТ'):
                  # print(row[3])
                    
                    newlist1.append(row[4])
newlist1                    





for ind in range(len(newlist)):
    a.add_vertex(newlist[ind]) #dodava jazol od pocetok
    a.add_vertex(newlist1[ind])  #dodava jazol od kraj
    tupp=(newlist[ind],newlist1[ind])   #pravi torka od dvata jazli(bidejki da sa dodade edge mora da prima tupple na vlez funkcijata)
    a.add_edge(tupp)  #dodava edge vo graph megu jazol od pocetok i jazol od kraj








def breadth_first_search_find_reachable_nodes(graph, starting_vertex):
    visited = {starting_vertex}
    queue = deque([[starting_vertex]])
    while queue:
        vertex_list = queue.popleft()
        vertex_to_expand = vertex_list[-1]
        for neighbour in graph.neighbours(vertex_to_expand):
            if neighbour not in visited:
                visited.add(neighbour)
                queue.append(vertex_list + [neighbour])
    return visited


breadth_first_search_find_reachable_nodes(a, '186 - Марвинци 1 (авто-патека)')









all_vertices = set(a.vertices())

counter = 0
isolated_raod_networks = []

while all_vertices:
    one_vertex = list(all_vertices)[0]
    reachable = breadth_first_search_find_reachable_nodes(a, one_vertex)
    all_vertices.difference_update(reachable)
    isolated_raod_networks.append((len(reachable), reachable))
    counter += 1
counter


sorted(isolated_raod_networks, reverse=False)
