import copy

def klik(circle):
    x,y= circle
    circle_neighbours=[]
    neighbours=[(x, y), (x,y+1),(x,y-1),(x+1,y),(x-1,y)]

    for n in  neighbours:
        nx,ny=n
        if 0<=nx<5 and 0<=ny<5:
            circle_neighbours.append(n)
    return circle_neighbours


klik((0, 1))

def expand_state(state):
    new_states = []
    for i_n, row in enumerate(state):
        for i_m, m in enumerate(row):
            new_state = list(list(x for x in row) for row in state)
            for i, j in klik((i_n, i_m)):
                new_state[i][j] = 0 if new_state[i][j] == 1 else 1
            new_state = tuple(tuple(x for x in row) for row in new_state)
            new_states.append(new_state)
    return new_states


table = [
    [1, 1, 0, 0, 0],
    [1, 0, 0, 0, 0],
    [0, 0, 1, 0, 0],
    [0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0]
]
expand_state(table)

def check_goal(state):
    return sum(t for row in state for t in row) == 0






def search_path(initial_state, expand_state, check_goal):
    visited = {initial_state}
    states_queue = deque([[initial_state]])
    while states_queue:
        states_list = states_queue.popleft()
        state_to_expand = states_list[-1]
        for next_state in expand_state(state_to_expand):
            if next_state not in visited:
                if check_goal(next_state):
                    return states_list + [next_state]
                visited.add(next_state)
                states_queue.append(states_list + [next_state])
    return []



table = [
    [0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 0, 0]
]
table = tuple(tuple(x for x in row) for row in table)
search_path(table, expand_state, check_goal)





/////////SO A* ALGORITAM

def h(state):
#state_matrix = [list(row) for row in state]
    count_1 = sum(row.count(1) for row in state)
    answer = count_1/5
    return answer


def a_star_search(starting_vertex, heuristic_function, alpha=1):
    expanded = set()
    queue = [((0, 0), [starting_vertex])]
    heapq.heapify(queue)
    c = 0
    while queue:
        c += 1
        weight_tuple, vertex_list = heapq.heappop(queue)
        current_a_star_weight, current_path_weight = weight_tuple
        vertex_to_expand = vertex_list[-1]
        if check_goal(vertex_to_expand):
            return current_path_weight, vertex_list, c
        if vertex_to_expand in expanded:
            continue
        for neighbour in expand_state(vertex_to_expand):
            if neighbour not in expanded:
                heuristic = heuristic_function(neighbour)
                path_weight = current_path_weight + 1
                a_star_weight = path_weight + alpha * heuristic
                heapq.heappush(queue, ((a_star_weight, path_weight),
                vertex_list + [neighbour]))
        expanded.add(vertex_to_expand)
